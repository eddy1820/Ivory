// Code generated by MockGen. DO NOT EDIT.
// Source: user_usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "gate/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserUsecase is a mock of UserUsecase interface.
type MockUserUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUsecaseMockRecorder
}

// MockUserUsecaseMockRecorder is the mock recorder for MockUserUsecase.
type MockUserUsecaseMockRecorder struct {
	mock *MockUserUsecase
}

// NewMockUserUsecase creates a new mock instance.
func NewMockUserUsecase(ctrl *gomock.Controller) *MockUserUsecase {
	mock := &MockUserUsecase{ctrl: ctrl}
	mock.recorder = &MockUserUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUsecase) EXPECT() *MockUserUsecaseMockRecorder {
	return m.recorder
}

// GetUserById mocks base method.
func (m *MockUserUsecase) GetUserById(id int64) (domain.User, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", id)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockUserUsecaseMockRecorder) GetUserById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUserUsecase)(nil).GetUserById), id)
}

// SetUser mocks base method.
func (m *MockUserUsecase) SetUser(username, gender, name, address string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUser", username, gender, name, address)
	ret0, _ := ret[0].(int)
	return ret0
}

// SetUser indicates an expected call of SetUser.
func (mr *MockUserUsecaseMockRecorder) SetUser(username, gender, name, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUser", reflect.TypeOf((*MockUserUsecase)(nil).SetUser), username, gender, name, address)
}
